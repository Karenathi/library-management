openapi: 3.0.3
info:
  title: Library API
  version: 1.1.1
  description: STD22119
servers:
  - url: https://library.com
paths:
  /books/{page}:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: "#/components/parameters/pathPagination"
      responses:
        200:
          $ref: "#/components/responses/Response200"
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: "#/components/parameters/queryPagination"
      responses:
        200:
          $ref: "#/components/responses/Response200"
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"

    put:
      tags:
        - "Books"
      summary: Update multiple books
      description: Update information for multiple books
      requestBody:
        description: Import books in either Excel or JSON format
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookImport"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              $ref: "#/components/schemas/ExcelBookImport"
      responses:
        200:
          $ref: "#/components/responses/Response200"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"

  /authors/{page}:
    get:
      tags:
        - "Authors"
      summary: Get all authors
      description: Get all the authors in the database
      operationId: Get Authors
      parameters:
        - $ref: "#/components/parameters/pathPagination"
      responses:
        200:
          $ref: "#/components/responses/Response200"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"
  /authors:
    get:
      tags:
        - "Authors"
      summary: Get all authors
      description: Get all the authors in the database
      operationId: Get Authors
      parameters:
        - $ref: "#/components/parameters/queryPagination"
      responses:
        200:
          $ref: "#/components/responses/Response200"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"
    put:
      tags:
        - "Authors"
      summary: Update author by id
      description: Update information according to id
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Import authors in either Excel or JSON format
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorImport"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet: # MIME type for Excel
            schema:
              $ref: "#/components/schemas/ExcelAuthorImport"
      responses:
        200:
          $ref: "#/components/responses/Response200"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"
    delete:
      tags:
        - "Authors"
      summary: Delete author by id
      description: Deleting an author by id
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: "#/components/responses/Response200"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Books"
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: "#/components/responses/Response200"
          description: The updated book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"
  /books/authors:
    put:
      tags:
        - "Books"
      summary: Update Book authors
      description: Update the authors of multiple books
      requestBody:
        description: Import books in either Excel or JSON format
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookImport"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              $ref: "#/components/schemas/ExcelBookImport"
      responses:
        200:
          $ref: "#/components/responses/Response200"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"
  /books/import:
    post:
      tags:
        - "Books"
      summary: Import books
      description: Import a list of books
      operationId: importBooks
      requestBody:
        description: Import books in either Excel or JSON format
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookImport"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              $ref: "#/components/schemas/ExcelBookImport"
      responses:
        200:
          description: List of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"
  /authors/import:
    post:
      tags:
        - "Authors"
      summary: Import authors
      description: Import a list of authors
      operationId: importAuthors
      requestBody:
        description: Import authors in either Excel or JSON format
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorImport"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              $ref: "#/components/schemas/ExcelAuthorImport"
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"
components:
  schemas:
    Book:
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
        - type: object
          properties:
            author:
              $ref: "#/components/schemas/Author"
    Author:
      type: object
      properties:
        authorId:
          type: string
        name:
          type: string
        sex:
          enum:
            - M
            - F
    CrupdateBook:
      type: object
      properties:
        bookId:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: string
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    AuthorImport:
      oneOf:
        - $ref: "#/components/schemas/ExcelAuthorImport"
        - $ref: "#/components/schemas/JSONAuthorImport"

    ExcelAuthorImport:
      type: object
      properties:
        excelFile:
          type: string
          format: binary

    JSONAuthorImport:
      type: array
      items:
        type: object
        properties:
          authorName:
            type: string
          sex:
            type: string

    BookImport:
      oneOf:
        - $ref: "#/components/schemas/ExcelBookImport"
        - $ref: "#/components/schemas/JSONBookImport"

    ExcelBookImport:
      type: object
      properties:
        excelFile:
          type: string
          format: binary

    JSONBookImport:
      type: array
      items:
        type: object
        properties:
          bookName:
            type: string
          author:
            $ref: "#/components/schemas/AuthorImport"
          pageNumbers:
            type: string
          topic:
            type: string
            enum:
              - ROMANCE
              - COMEDY
              - OTHER
          releaseDate:
            type: string
            format: date

    defaultResponse:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
        body:
          type: object

  responses:
    Response200:
      description: HTTP 200 (OK)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/defaultResponse"
          example:
            status:
              code: 200
              message: OK
    Response400:
      description: HTTP 400 (Bad Request)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/defaultResponse"
          example:
            status:
              code: 400
              message: Bad Request
    Response403:
      description: HTTP 403 (Forbidden)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/defaultResponse"
          example:
            status:
              code: 403
              message: Forbidden
    Response500:
      description: HTTP 500 (Internal Server Error)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/defaultResponse"
          example:
            status:
              code: 500
              message: Internal Server Error

  parameters:
    queryPagination:
      in: query
      name: page
      description: Page number for pagination
      required: false
      schema:
        type: object
        properties:
          Page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50

    pathPagination:
      in: path
      name: page
      description: Page number for pagination
      required: true
      schema:
        type: object
        properties:
          Page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50