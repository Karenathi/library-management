openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22099
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Book"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
          - $ref: '#/components/parameters/queryPagination'

      responses:
       '200':
          $ref: "#/components/responses/Response200"

       '400':
          $ref: "#/components/responses/Response400"

       '403':
          $ref: "#/components/responses/Response403"

       '500':
          $ref: "#/components/responses/Response500"
        
    put:
      tags:
        - "Book"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
         '200':
          $ref: "#/components/responses/Response200"

         '400':
          $ref: "#/components/responses/Response400"

         '403':
          $ref: "#/components/responses/Response403"

         '500':
          $ref: "#/components/responses/Response500"
        
  /authors:
    get:
      tags:
        - "Author"
      summary: Get all authors 
      description: Get all the authors in the database
      parameters:
        - $ref: '#/components/parameters/queryPagination'

      responses:
         '200':
          $ref: "#/components/responses/Response200"

         '400':
          $ref: "#/components/responses/Response400"

         '403':
          $ref: "#/components/responses/Response403"

         '500':
          $ref: "#/components/responses/Response500"

    put:
      tags:
        - "Author"
      summary: Update author by id 
      description: Update information according by id
      parameters:
        - name: id
          in: path
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
      requestBody:
        required: true
        content:
          application/json:
           schema:
             $ref: "#/components/schemas/Author"
      responses:
         '200':
          $ref: "#/components/responses/Response200"

         '400':
          $ref: "#/components/responses/Response400"

         '403':
          $ref: "#/components/responses/Response403"

         '500':
          $ref: "#/components/responses/Response500"
    
    delete:
      tags:
        - "Author"
      summary: Delete author by id
      description: Deleting an author by id
      parameters:
        - name: id
          in: path
          required: true
          schema: 
            type: integer
      responses:
         '200':
          $ref: "#/components/responses/Response200"

         '400':
          $ref: "#/components/responses/Response400"

         '403':
          $ref: "#/components/responses/Response403"

         '500':
          $ref: "#/components/responses/Response500"
  /books/{bookID}/authors/{authorID}:
   put:
      tags:
        - "Book"
      parameters:
        - name: bookID
          in: path
          schema: 
            type: string
          required: true

        - name: authorID
          in: path
          schema: 
            type: string
          required: true
      responses:
        '200':
            description: The updated book
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Book"
  
  /books/authors:
    put:
      tags:
        - "Book"
      summary: Update Book authors
      description: Update the authors of multiple books
      requestBody: 
        required: true
        content:
            application/json:
              schema: 
               type: array
               items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
         '200':
          $ref: "#/components/responses/Response200"

         '400':
          $ref: "#/components/responses/Response400"

         '403':
          $ref: "#/components/responses/Response403"

         '500':
          $ref: "#/components/responses/Response500"
  /books/{page}:
    get:
      tags:
        - "Book"
      parameters:
        - $ref: "#/components/parameters/pathPagination"
      
      responses:
         '200':
          $ref: "#/components/responses/Response200"

         '400':
          $ref: "#/components/responses/Response400"

         '403':
          $ref: "#/components/responses/Response403"

         '500':
          $ref: "#/components/responses/Response500"
components:
  schemas:
    Book:
       allOf:
         - $ref: "#/components/schemas/CrupdateBook"
         - type: object
           properties:
             author: 
              $ref: "#/components/schemas/Author"

    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sex: 
          enum:
            - M
            - F
    
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: string
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookID:
          type: integer
        authorID:
          type: integer

    defaultResponse:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
        body:
          type: object

  responses:
    Response200:
      description: HTTP 200 (OK)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/defaultResponse"
          example:
            status:
              code: 200
              message: OK
    Response400:
      description: HTTP 400 (Bad Request)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/defaultResponse"
          example:
            status:
              code: 400
              message: Bad Request
    Response403:
      description: HTTP 403 (Forbidden)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/defaultResponse"
          example:
            status:
              code: 403
              message: Forbidden
    Response500:
      description: HTTP 500 (Internal Server Error)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/defaultResponse"
          example:
            status:
              code: 500
              message: Internal Server Error
  parameters:
    queryPagination:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema: 
        type: object
        properties:
          page:
            type: integer
            default: 1
          pagesize: 
            type: integer
            default: 50

        
    
    pathPagination:
      name: page
      in: path
      description: Page number for pagination
      required: true
      schema: 
        type: object
        properties:
          page:
            type: integer
            default: 1
          pagesize: 
            type: integer
            default: 50
        

