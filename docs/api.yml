openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22099
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string

        - in: query
          name: releaseDate
          description: Filter books by release date intervals
          required: false
          schema:
            type: string
            format: date

        - in: query
          name: page 
          description: Page number for pagination (default:1)
          required: false
          schema:
            type: integer
            default: 1

        - in: query
          name: pageSize
          description: Page number for pagination (default:1)
          required: false
          schema: 
            type: integer
            default: 50

      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    get:
      summary: Get all authors 
      description: Get all the authors in the database
      parameters:
        - in: query
          name: page 
          description: Page number for pagination (default:1)
          required: false
          schema: 
            type: integer
            default: 1
        
        - in: query
          name: pageSize
          description: Number of items per page (default:50)
          required: false
          schema: 
            type: integer
            default: 50
      responses:
        '200':
           description: The author's list
    put:
      summary: Update author by id 
      description: Update information according by id
      parameters:
        - name: id
          in: path
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
      requestBody:
        required: true
        content:
          application/json:
           schema:
              $ref: "#/components/schemas/Author"
      responses:
        '200':
          description: Author updated successfully
    
    delete:
      summary: Delete author by id
      description: Deleting an author by id
      parameters:
        - name: id
          in: path
          required: true
          schema: 
            type: integer
      responses:
        '204':
          description: Author deleted successfully

  /books/{bookID}/authors/{authorID}:
   put:
      parameters:
        - name: bookID
          in: path
          schema: 
            type: string
          required: true

        - name: authorID
          in: path
          schema: 
            type: string
          required: true
      responses:
        '200':
            description: The updated book
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Book"
  
  /books/authors:
    put:
      summary: Update Book authors
      description: Update the authors of multiple books
      requestBody: 
        required: true
        content:
            application/json:
              schema: 
               type: array
               items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        '200': 
          description: Authors updated successfully
  
  /topics:
    get:
      summary: Get all topics 
      description: Get all the topics in the database
      parameters:
        - in: query
          name: page 
          description: Page number for pagination (default:1)
          required: false
          schema: 
            type: integer
            default: 1

        - in: query
          name: pageSize
          description: Number of items per page (default:50)
          required: false
          schema: 
            type: integer
            default: 50
        

      responses:
        '200':
          description: The topics list

    put:
      summary: Update topic
      description: Update topic according by ID 
      requestBody:
        required: true
        content:
          application/json:
           schema:
            type: array
            items: 
              $ref: "#/components/schemas/Book"
      responses:
        '200':
          description: Topic updated successfully

    delete:
      summary: Delete Topic
      description: Delete Topic by id
      parameters:
      - in: query
        name: id
        required: true
        schema: 
          type: integer

      responses:
        '204':
          description: Topic deleted successfully

  /books/{bookID}/topics/{topicsID}:
    put:
      parameters:
        - in: path
          name: bookID
          schema: 
            type: string
          required: true 
      responses:
        '200':
          description: The updated topic
  
  /books/topics:
    put:
      summary: Update Book topics
      description: Update the topic of a Book
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: array
              items: 
                $ref: "#/components/schemas/UpdateTopicBook"
      responses:
        '200':
          description: Topic updated successfully
  
  /authorTopics:
    get:
      summary: Get associations between authors and topics
      responses:
        '200':
          description: List of associations between authors and topics
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: object
                properties:
                 authorName: 
                  type: string
                 topicName:
                  type: string
      

     




components:
  schemas:
    Book:
       allOf:
         - $ref: "#/components/schemas/CrupdateBook"
         - type: object
           properties:
             author: 
              $ref: "#/components/schemas/Author"

    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sex: 
          enum:
            - M
            - F
    
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: string
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookID:
          type: integer
        authorID:
          type: integer
    
    UpdateTopicBook:
      type: object
      properties:
        topicsID:
          type: integer
        topicName:
          type: string
  
