openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22099
servers:
  - url: https://library.com
paths:

  /visitors:
    get:
        tags:
        - "Visitors"
        summary: Get all visitors
        description: List of the visitors
        operationId: getVisitors
        parameters:
          - $ref: '#/components/schemas/Visitors'

        responses:
         '200':
            $ref: '#/components/responses/BookList_200'
         '400': 
            $ref: '#/components/responses/BookList400'
         '403':
            $ref: '#/components/responses/BookList403'
         '500': 
            $ref: '#/components/responses/Booklist500'
    put:
      tags:
        - "Visitors"
      summary: Update visitors
      description: Update the list of visitors
      operationId: updateVisitors
      requestBody:
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: "#/components/schemas/Visitors"
      responses:
         '200':
            $ref: '#/components/responses/BookList_200'
         '400': 
            $ref: '#/components/responses/BookList400'
         '403':
            $ref: '#/components/responses/BookList403'
         '500': 
            $ref: '#/components/responses/Booklist500'

    delete:
      tags:
        - "Visitors"
      summary: Delete visitors by id
      description: Delete a visitor's information according by their id
      parameters:
        - name: id
          in: query
          required: true
          schema: 
            type: integer
      responses:
         '200':
            $ref: '#/components/responses/BookList_200'
         '400': 
            $ref: '#/components/responses/BookList400'
         '403':
            $ref: '#/components/responses/BookList403'
         '500': 
            $ref: '#/components/responses/Booklist500'

  /books:
    get:
      tags:
        - "Book"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
          - $ref: '#/components/parameters/queryPagination'
          - $ref: '#/components/parameters/pathPagination'

      responses:
         '200':
            $ref: '#/components/responses/BookList_200'
         '400': 
            $ref: '#/components/responses/BookList400'
         '403':
            $ref: '#/components/responses/BookList403'
         '500': 
            $ref: '#/components/responses/Booklist500'
    put:
      tags:
        - "Book"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'

              $ref: "#/components/schemas/BookImport"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
          
            schema:
              $ref: "#/components/schemas/ExcelBookImport"

      responses:
         '200':
            $ref: '#/components/responses/BookList_200'
         '400': 
            $ref: '#/components/responses/BookList400'
         '403':
            $ref: '#/components/responses/BookList403'
         '500': 
            $ref: '#/components/responses/Booklist500'
  /authors:
    get:
      tags:
        - "Author"
      summary: Get all authors 
      description: Get all the authors in the database
      parameters:
        - $ref: '#/components/parameters/queryPagination'

      responses:
         '200':
            $ref: '#/components/responses/BookList_200'
         '400': 
            $ref: '#/components/responses/BookList400'
         '403':
            $ref: '#/components/responses/BookList403'
         '500': 
            $ref: '#/components/responses/Booklist500'
    put:
      tags:
        - "Author"
      summary: Update author by id 
      description: Update information according by id
      parameters:
        - name: id
          in: path
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"

      requestBody:
        required: true
        content:
          application/json:
           schema:
              $ref: "#/components/schemas/Author"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet: # MIME type for Excel
            schema:
              $ref: "#/components/schemas/ExcelAuthorImport"

      responses:
         '200':
            $ref: '#/components/responses/BookList_200'
         '400': 
            $ref: '#/components/responses/BookList400'
         '403':
            $ref: '#/components/responses/BookList403'
         '500': 
            $ref: '#/components/responses/Booklist500'
    delete:
      tags:
        - "Author"
      summary: Delete author by id
      description: Deleting an author by id
      parameters:
        - name: id
          in: query
          required: true
          schema: 
            type: integer
      responses:
         '200':
            $ref: '#/components/responses/BookList_200'
         '400': 
            $ref: '#/components/responses/BookList400'
         '403':
            $ref: '#/components/responses/BookList403'
         '500': 
            $ref: '#/components/responses/Booklist500'
          
  /books/{bookID}/authors/{authorID}:
   put:
      tags:
        - "Book"
      parameters:
        - name: bookID
          in: path
          schema: 
            type: string
          required: true

        - name: authorID
          in: path
          schema: 
            type: string
          required: true
      responses:
         '200':
            $ref: '#/components/responses/BookList_200'
         '400': 
            $ref: '#/components/responses/BookList400'
         '403':
            $ref: '#/components/responses/BookList403'
         '500': 
            $ref: '#/components/responses/Booklist500'
  
  /books/authors:
    post:
      tags:
        - "Book"
      summary: Import books
      description: Import a list of books
      operationId: importBooks
      requestBody:
        description: Import books in either Excel or JSON format
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookImport"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              $ref: "#/components/schemas/ExcelBookImport"
      responses:
         '200':
            $ref: '#/components/responses/BookList_200'
         '400': 
            $ref: '#/components/responses/BookList400'
         '403':
            $ref: '#/components/responses/BookList403'
         '500': 
            $ref: '#/components/responses/Booklist500'
    put:
      tags:
        - "Book"
      summary: Update Book authors
      description: Update the authors of multiple books
      requestBody: 
        required: true
        content:
            application/json:
              schema: 
               type: array
               items:
                $ref: '#/components/schemas/BookImport'

               $ref: "#/components/schemas/ExcelBookImport"
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet: # MIME type for Excel
            schema:
        $ref: "#/components/schemas/ExcelAuthorImport"

      responses:
         '200':
            $ref: '#/components/responses/BookList_200'
         '400': 
            $ref: '#/components/responses/BookList400'
         '403':
            $ref: '#/components/responses/BookList403'
         '500': 
            $ref: '#/components/responses/Booklist500'
  /books/{page}:
    get:
      tags:
        - "Book"
      parameters:
        - $ref: "#/components/parameters/pathPagination"
      
      responses:
         '200':
            $ref: '#/components/responses/BookList_200'
         '400': 
            $ref: '#/components/responses/BookList400'
         '403':
            $ref: '#/components/responses/BookList403'
         '500': 
            $ref: '#/components/responses/Booklist500'
  /authors/import:
    post:
      tags:
        - "Author"
      summary: Import authors
      description: Import a list of authors
      operationId: importAuthors
      requestBody:
        description: Import authors in either Excel or JSON format
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorImport"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              $ref: "#/components/schemas/ExcelAuthorImport"
      responses:
         '200':
            $ref: '#/components/responses/BookList_200'
         '400': 
            $ref: '#/components/responses/BookList400'
         '403':
            $ref: '#/components/responses/BookList403'
         '500': 
            $ref: '#/components/responses/Booklist500'

components:
  parameters:
    queryPagination:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        default: 1

    pathPagination:
      name: pageSize
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        default: 50

  responses:
    BookList_200:
      description: List of books
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookListBody'
    BookList400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestBody'
    BookList403:
      description: FORBIDDEN
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenBody'
    Booklist500:
      description: INTERNAL SERVER ERROR
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerErrorBody'

  schemas:
    ResponseStatus:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
    ResponseBodyTemplate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        body:
          type: object
          
    BadRequestBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 400
          message: BAD REQUEST
        body: { }

    BookListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'
    ForbiddenBody:
     allOf:
       - $ref: '#/components/schemas/ResponseBodyTemplate'
     example:
      status:
        code: 403
        message: FORBIDDEN
      body: { }
    ServerErrorBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 500
          message: INTERNAL SERVER ERROR
        body: { }

    Book:
       allOf:
         - $ref: "#/components/schemas/CrupdateBook"
         - type: object
           properties:
             author:
              $ref: "#/components/schemas/Author"

    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sex:
          enum:
            - M
            - F
    Visitors:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        reference:
          type: string

    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: string
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookID:
          type: integer
        authorID:
          type: integer

    AuthorImport:
      oneOf:
        - $ref: "#/components/schemas/ExcelAuthorImport"
        - $ref: "#/components/schemas/JSONAuthorImport"

    ExcelAuthorImport:
      type: object
      properties:
        excelFile:
          type: string
          format: binary
      required:
        - authorName
        - sex

    JSONAuthorImport:
      type: array
      items:
        type: object
        properties:
          authorName:
            type: string
          sex:
            type: string

    BookImport:
      oneOf:
        - $ref: "#/components/schemas/ExcelBookImport"
        - $ref: "#/components/schemas/JSONBookImport"

    ExcelBookImport:
      type: object
      properties:
        excelFile:
          type: string
          format: binary

    JSONBookImport:
      type: array
      items:
        type: object
        properties:
          bookName:
            type: string
          author:
            $ref: "#/components/schemas/AuthorImport"
          pageNumbers:
            type: string
          topic:
            type: string
            enum:
              - ROMANCE
              - COMEDY
              - OTHER
          releaseDate:
            type: string
            format: date
    defaultResponse:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
        body:
          type: object

