openapi: 3.0.3
info:
  title: Library API
  version: 1.0.1
  description: STD22001
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDate
          description: Filter books by release date intervals
          required: false
          schema:
            type: string
            format: date
          

      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
   get:
      summary: Récupérer la liste des auteurs
      description: Récupérez la liste complète des auteurs dans la base de données.
      responses:
        '200':
          description: Liste des auteurs récupérée avec succès 
    
   put:
      summary: Mettre à jour un auteur par ID
      description: Mettez à jour les informations d'un auteur en fonction de son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        '200':
          description: Auteur mis à jour avec succès
   delete:
      summary: Supprimer un auteur par ID
      description: Supprimez un auteur en fonction de son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Auteur supprimé avec succès

  /books/{bookId}/authors/{authorID}:
   put:
    parameters:
      - name: bookId
        in: path
        schema: 
          type: string
        required: true

      - name: authorID
        in: path
        schema:
          type: string
        required: true
    responses:
      '200':
          description: The updated book
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Book"

  /books/authors:
   put:
    tags:
      - "Book"
    requestBody:
        content:
          application/json:
            schema:
              type: array
              items: 

components:
  schemas:
    Book:
      allOf:
       - $ref : "#/components/schemas/CrupdateBook"
       - type: object
         properties:
           author:
            $ref: "#/components/schemas/Author"

    Author:
           type: object
           properties:
            id:
              type: integer
            name:
              type: string
            sex:
             type: string

    CrupdateBook :
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date


